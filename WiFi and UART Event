
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"

#include "esp_spi_flash.h"

#include "esp_wifi.h"
#include "esp_system.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_event_loop.h"

#include"string.h"
#include"driver/uart.h"



esp_err_t event_handler(void *ctx, system_event_t *event)
{
	if (event->event_id == SYSTEM_EVENT_SCAN_DONE) {
		printf("Number of access points found: %d\n", event->event_info.scan_done.number);
		uint16_t apCount = event->event_info.scan_done.number;
	if (apCount == 0) {
		return ESP_OK;
		}
	wifi_ap_record_t *list = (wifi_ap_record_t *)malloc(sizeof(wifi_ap_record_t) * apCount);
	ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&apCount, list));
	int i;
	for (i=0; i<apCount; i++) {
		char *authmode;
		switch(list[i].authmode) {
			case WIFI_AUTH_OPEN:
						authmode = "WIFI_AUTH_OPEN";
						break;
			case WIFI_AUTH_WEP:
						authmode = "WIFI_AUTH_WEP";
						break;
			case WIFI_AUTH_WPA_PSK:
						authmode = "WIFI_AUTH_WPA_PSK";
						break;
			case WIFI_AUTH_WPA2_PSK:
						authmode = "WIFI_AUTH_WPA2_PSK";
						break;
			case WIFI_AUTH_WPA_WPA2_PSK:
						authmode = "WIFI_AUTH_WPA_WPA2_PSK";
						break;
			default:
						authmode = "Unknown";
						break;
			}
	printf("ssid=%s, rssi=%d, authmode=%s\n", list[i].ssid, list[i].rssi, authmode);
	}
	free(list);
	}

/*
	if (event->event_id == SYSTEM_EVENT_STA_GOT_IP) 
	{
		printf("Our IP address is " IPSTR "\n", IP2STR(&event->event_info.got_ip.ip_info.ip));
		printf("We have now connected to a station and can do things...\n");
	}
	if (event->event_id == SYSTEM_EVENT_STA_START) 
	{
		ESP_ERROR_CHECK(esp_wifi_connect());
	
	}

*/

	return ESP_OK;


}


int app_main(void)
{

	nvs_flash_init();
	tcpip_adapter_init();

	ESP_ERROR_CHECK(esp_event_loop_init(event_handler, NULL));

	wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
	
	ESP_ERROR_CHECK(esp_wifi_init(&cfg));
	ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
	ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));

	ESP_ERROR_CHECK(esp_wifi_start());

	wifi_scan_config_t scanConf = {
		.ssid = NULL,
		.bssid = NULL,
		.channel = 0,
		.show_hidden = 1
		};

	ESP_ERROR_CHECK(esp_wifi_scan_start(&scanConf, 0));
/*
	wifi_config_t sta_config = {
		.sta = {
		.ssid = "Cognier-2",
		.password = "bravia452",
		.bssid_set = 0
		}
	};

	ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &sta_config));
	ESP_ERROR_CHECK(esp_wifi_start());
*/


	return 0;
}

/*


char str[45];
#define BUF_SIZE (1024)
 int codex[] = {0x08, 0xC6 ,0x04 ,0x08 ,0x00 ,0xF2 ,0xFF ,0x00 ,0xFD ,0x35};
int i = 0;


static void echo_task()
{
	
    uart_config_t uart_config = {
        .baud_rate = 9600,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,    
        .rx_flow_ctrl_thresh = 122,
    };

    uart_param_config(UART_NUM_2, &uart_config);
 

    uart_set_pin(UART_NUM_2, 17, 16, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);

    uart_driver_install(UART_NUM_2, BUF_SIZE * 2, 0, 0, NULL, 0);
 
    uint8_t * data = (uint8_t *)malloc(sizeof(BUF_SIZE));
   
	// char *code = (char)codex ;
 
	int len = sizeof(codex);
	uart_read_bytes( UART_NUM_2, data, BUF_SIZE, 20 / portTICK_RATE_MS);
	printf("Value @ Board %d\n",*data );	

   while(i >= 0) {
        
        char *code = (char)&codex[9];
	uart_write_bytes(UART_NUM_2, (const char*)code, len);

	i--;
		
	
    }
	uart_read_bytes(UART_NUM_2, data, BUF_SIZE, 20 / portTICK_RATE_MS);
	printf("Value @ Board %d\n", *data);
	
}


void app_main()
{
    xTaskCreate(echo_task, "echo_task", 1024, NULL, 10, NULL);
}

*/
